// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// getVersion
std::string getVersion();
RcppExport SEXP genepop_getVersion() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getVersion());
    return rcpp_result_gen;
END_RCPP
}
// setRandomSeed
void setRandomSeed(long seed);
RcppExport SEXP genepop_setRandomSeed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type seed(seedSEXP);
    setRandomSeed(seed);
    return R_NilValue;
END_RCPP
}
// setMantelSeed
void setMantelSeed(long seed);
RcppExport SEXP genepop_setMantelSeed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type seed(seedSEXP);
    setMantelSeed(seed);
    return R_NilValue;
END_RCPP
}
// RHWEachLocusEachPopulationHD
std::string RHWEachLocusEachPopulationHD(std::string inputFile, std::string outputFile, bool enumeration, int dememorization, int batches, int iterations);
RcppExport SEXP genepop_RHWEachLocusEachPopulationHD(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP enumerationSEXP, SEXP dememorizationSEXP, SEXP batchesSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< bool >::type enumeration(enumerationSEXP);
    Rcpp::traits::input_parameter< int >::type dememorization(dememorizationSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWEachLocusEachPopulationHD(inputFile, outputFile, enumeration, dememorization, batches, iterations));
    return rcpp_result_gen;
END_RCPP
}
// RHWEachLocusEachPopulationHE
std::string RHWEachLocusEachPopulationHE(std::string inputFile, std::string outputFile, bool enumeration, int dememorization, int batches, int iterations);
RcppExport SEXP genepop_RHWEachLocusEachPopulationHE(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP enumerationSEXP, SEXP dememorizationSEXP, SEXP batchesSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< bool >::type enumeration(enumerationSEXP);
    Rcpp::traits::input_parameter< int >::type dememorization(dememorizationSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWEachLocusEachPopulationHE(inputFile, outputFile, enumeration, dememorization, batches, iterations));
    return rcpp_result_gen;
END_RCPP
}
// RHWEachLocusEachPopulationProbability
std::string RHWEachLocusEachPopulationProbability(std::string inputFile, std::string outputFile, bool enumeration, int dememorization, int batches, int iterations);
RcppExport SEXP genepop_RHWEachLocusEachPopulationProbability(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP enumerationSEXP, SEXP dememorizationSEXP, SEXP batchesSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< bool >::type enumeration(enumerationSEXP);
    Rcpp::traits::input_parameter< int >::type dememorization(dememorizationSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWEachLocusEachPopulationProbability(inputFile, outputFile, enumeration, dememorization, batches, iterations));
    return rcpp_result_gen;
END_RCPP
}
// RHWGlobalHD
std::string RHWGlobalHD(std::string inputFile, std::string outputFile, int dememorization, int batches, int iterations);
RcppExport SEXP genepop_RHWGlobalHD(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP dememorizationSEXP, SEXP batchesSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< int >::type dememorization(dememorizationSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWGlobalHD(inputFile, outputFile, dememorization, batches, iterations));
    return rcpp_result_gen;
END_RCPP
}
// RHWGlobalHE
std::string RHWGlobalHE(std::string inputFile, std::string outputFile, int dememorization, int batches, int iterations);
RcppExport SEXP genepop_RHWGlobalHE(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP dememorizationSEXP, SEXP batchesSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< int >::type dememorization(dememorizationSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWGlobalHE(inputFile, outputFile, dememorization, batches, iterations));
    return rcpp_result_gen;
END_RCPP
}
// RHWEachLocusEachPopulationHDWithSettingsFile
std::string RHWEachLocusEachPopulationHDWithSettingsFile(std::string inputFile, std::string outputFile, std::string settingsFile);
RcppExport SEXP genepop_RHWEachLocusEachPopulationHDWithSettingsFile(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWEachLocusEachPopulationHDWithSettingsFile(inputFile, outputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// RHWEachLocusEachPopulationHEWithSettingsFile
std::string RHWEachLocusEachPopulationHEWithSettingsFile(std::string inputFile, std::string outputFile, std::string settingsFile);
RcppExport SEXP genepop_RHWEachLocusEachPopulationHEWithSettingsFile(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWEachLocusEachPopulationHEWithSettingsFile(inputFile, outputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// RHWEachLocusEachPopulationProbabilityWithSettingsFile
std::string RHWEachLocusEachPopulationProbabilityWithSettingsFile(std::string inputFile, std::string outputFile, std::string settingsFile);
RcppExport SEXP genepop_RHWEachLocusEachPopulationProbabilityWithSettingsFile(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWEachLocusEachPopulationProbabilityWithSettingsFile(inputFile, outputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// RHWGlobalHDWithSettingsFile
std::string RHWGlobalHDWithSettingsFile(std::string inputFile, std::string outputFile, std::string settingsFile);
RcppExport SEXP genepop_RHWGlobalHDWithSettingsFile(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWGlobalHDWithSettingsFile(inputFile, outputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// RHWGlobalHEWithSettingsFile
std::string RHWGlobalHEWithSettingsFile(std::string inputFile, std::string outputFile, std::string settingsFile);
RcppExport SEXP genepop_RHWGlobalHEWithSettingsFile(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWGlobalHEWithSettingsFile(inputFile, outputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// RGDEachPairLociEachPopulation
std::string RGDEachPairLociEachPopulation(std::string inputFile, std::string outputFile, int dememorization, int batches, int iterations);
RcppExport SEXP genepop_RGDEachPairLociEachPopulation(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP dememorizationSEXP, SEXP batchesSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< int >::type dememorization(dememorizationSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(RGDEachPairLociEachPopulation(inputFile, outputFile, dememorization, batches, iterations));
    return rcpp_result_gen;
END_RCPP
}
// RGDGenotypicContingency
std::string RGDGenotypicContingency(std::string inputFile, std::string outputFile);
RcppExport SEXP genepop_RGDGenotypicContingency(SEXP inputFileSEXP, SEXP outputFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RGDGenotypicContingency(inputFile, outputFile));
    return rcpp_result_gen;
END_RCPP
}
// RGDEachPairLociEachPopulationWithSettingsFile
std::string RGDEachPairLociEachPopulationWithSettingsFile(std::string inputFile, std::string outputFile, std::string settingsFile);
RcppExport SEXP genepop_RGDEachPairLociEachPopulationWithSettingsFile(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RGDEachPairLociEachPopulationWithSettingsFile(inputFile, outputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// RPDGenicAllPopulationDifferentiation
std::string RPDGenicAllPopulationDifferentiation(std::string inputFile, std::string outputFile, int dememorization, int batches, int iterations);
RcppExport SEXP genepop_RPDGenicAllPopulationDifferentiation(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP dememorizationSEXP, SEXP batchesSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< int >::type dememorization(dememorizationSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(RPDGenicAllPopulationDifferentiation(inputFile, outputFile, dememorization, batches, iterations));
    return rcpp_result_gen;
END_RCPP
}
// RPDGenicAllPairPopulationDifferentiation
std::string RPDGenicAllPairPopulationDifferentiation(std::string inputFile, std::string outputFile, int dememorization, int batches, int iterations);
RcppExport SEXP genepop_RPDGenicAllPairPopulationDifferentiation(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP dememorizationSEXP, SEXP batchesSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< int >::type dememorization(dememorizationSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(RPDGenicAllPairPopulationDifferentiation(inputFile, outputFile, dememorization, batches, iterations));
    return rcpp_result_gen;
END_RCPP
}
// RPDGenotypicAllPopulationDifferentiation
std::string RPDGenotypicAllPopulationDifferentiation(std::string inputFile, std::string outputFile, int dememorization, int batches, int iterations);
RcppExport SEXP genepop_RPDGenotypicAllPopulationDifferentiation(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP dememorizationSEXP, SEXP batchesSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< int >::type dememorization(dememorizationSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(RPDGenotypicAllPopulationDifferentiation(inputFile, outputFile, dememorization, batches, iterations));
    return rcpp_result_gen;
END_RCPP
}
// RPDGenotypicAllPairPopulationDifferentiation
std::string RPDGenotypicAllPairPopulationDifferentiation(std::string inputFile, std::string outputFile, int dememorization, int batches, int iterations);
RcppExport SEXP genepop_RPDGenotypicAllPairPopulationDifferentiation(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP dememorizationSEXP, SEXP batchesSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< int >::type dememorization(dememorizationSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(RPDGenotypicAllPairPopulationDifferentiation(inputFile, outputFile, dememorization, batches, iterations));
    return rcpp_result_gen;
END_RCPP
}
// RPDGenicAllPopulationDifferentiationWithSettingsFile
std::string RPDGenicAllPopulationDifferentiationWithSettingsFile(std::string inputFile, std::string outputFile, std::string settingsFile);
RcppExport SEXP genepop_RPDGenicAllPopulationDifferentiationWithSettingsFile(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RPDGenicAllPopulationDifferentiationWithSettingsFile(inputFile, outputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// RPDGenicAllPairPopulationDifferentiationWithSettingsFile
std::string RPDGenicAllPairPopulationDifferentiationWithSettingsFile(std::string inputFile, std::string outputFile, std::string settingsFile);
RcppExport SEXP genepop_RPDGenicAllPairPopulationDifferentiationWithSettingsFile(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RPDGenicAllPairPopulationDifferentiationWithSettingsFile(inputFile, outputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// RPDGenotypicAllPopulationDifferentiationWithSettingsFile
std::string RPDGenotypicAllPopulationDifferentiationWithSettingsFile(std::string inputFile, std::string outputFile, std::string settingsFile);
RcppExport SEXP genepop_RPDGenotypicAllPopulationDifferentiationWithSettingsFile(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RPDGenotypicAllPopulationDifferentiationWithSettingsFile(inputFile, outputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// RPDGenotypicAllPairPopulationDifferentiationWithSettingsFile
std::string RPDGenotypicAllPairPopulationDifferentiationWithSettingsFile(std::string inputFile, std::string outputFile, std::string settingsFile);
RcppExport SEXP genepop_RPDGenotypicAllPairPopulationDifferentiationWithSettingsFile(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RPDGenotypicAllPairPopulationDifferentiationWithSettingsFile(inputFile, outputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// RAnalyzingSingleContingencyTable
std::string RAnalyzingSingleContingencyTable(std::string inputFile, int dememorization, int batches, int iterations);
RcppExport SEXP genepop_RAnalyzingSingleContingencyTable(SEXP inputFileSEXP, SEXP dememorizationSEXP, SEXP batchesSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< int >::type dememorization(dememorizationSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(RAnalyzingSingleContingencyTable(inputFile, dememorization, batches, iterations));
    return rcpp_result_gen;
END_RCPP
}
// RAnalyzingSingleContingencyTableWithSettingsFile
std::string RAnalyzingSingleContingencyTableWithSettingsFile(std::string inputFile, std::string settingsFile);
RcppExport SEXP genepop_RAnalyzingSingleContingencyTableWithSettingsFile(SEXP inputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RAnalyzingSingleContingencyTableWithSettingsFile(inputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// RNmEstimates
std::string RNmEstimates(std::string inputFile, std::string outputFile, std::string dataType);
RcppExport SEXP genepop_RNmEstimates(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP dataTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataType(dataTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(RNmEstimates(inputFile, outputFile, dataType));
    return rcpp_result_gen;
END_RCPP
}
// RDescriptifAlleleAndGenotypeFrequenciesPerLocusPerSample
std::string RDescriptifAlleleAndGenotypeFrequenciesPerLocusPerSample(std::string inputFile, std::string outputFile);
RcppExport SEXP genepop_RDescriptifAlleleAndGenotypeFrequenciesPerLocusPerSample(SEXP inputFileSEXP, SEXP outputFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RDescriptifAlleleAndGenotypeFrequenciesPerLocusPerSample(inputFile, outputFile));
    return rcpp_result_gen;
END_RCPP
}
// RDescriptifGeneDiversitiesAndFisUsingAlleleIdentity
std::string RDescriptifGeneDiversitiesAndFisUsingAlleleIdentity(std::string inputFile, std::string outputFile, std::string dataType);
RcppExport SEXP genepop_RDescriptifGeneDiversitiesAndFisUsingAlleleIdentity(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP dataTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataType(dataTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(RDescriptifGeneDiversitiesAndFisUsingAlleleIdentity(inputFile, outputFile, dataType));
    return rcpp_result_gen;
END_RCPP
}
// RDescriptifGeneDiversitiesAndFisUsingAlleleSize
std::string RDescriptifGeneDiversitiesAndFisUsingAlleleSize(std::string inputFile, std::string outputFile, std::string dataType);
RcppExport SEXP genepop_RDescriptifGeneDiversitiesAndFisUsingAlleleSize(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP dataTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataType(dataTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(RDescriptifGeneDiversitiesAndFisUsingAlleleSize(inputFile, outputFile, dataType));
    return rcpp_result_gen;
END_RCPP
}
// REstimatingSpatialStructureAlleleIdentyAllPopulations
std::string REstimatingSpatialStructureAlleleIdentyAllPopulations(std::string inputFile, std::string outputFile, std::string dataType);
RcppExport SEXP genepop_REstimatingSpatialStructureAlleleIdentyAllPopulations(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP dataTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataType(dataTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(REstimatingSpatialStructureAlleleIdentyAllPopulations(inputFile, outputFile, dataType));
    return rcpp_result_gen;
END_RCPP
}
// REstimatingSpatialStructureAlleleIdentyAllPopulationsPairs
std::string REstimatingSpatialStructureAlleleIdentyAllPopulationsPairs(std::string inputFile, std::string outputFile, std::string dataType);
RcppExport SEXP genepop_REstimatingSpatialStructureAlleleIdentyAllPopulationsPairs(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP dataTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataType(dataTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(REstimatingSpatialStructureAlleleIdentyAllPopulationsPairs(inputFile, outputFile, dataType));
    return rcpp_result_gen;
END_RCPP
}
// REstimatingSpatialStructureAlleleSizeAllPopulations
std::string REstimatingSpatialStructureAlleleSizeAllPopulations(std::string inputFile, std::string outputFile, std::string dataType);
RcppExport SEXP genepop_REstimatingSpatialStructureAlleleSizeAllPopulations(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP dataTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataType(dataTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(REstimatingSpatialStructureAlleleSizeAllPopulations(inputFile, outputFile, dataType));
    return rcpp_result_gen;
END_RCPP
}
// REstimatingSpatialStructureAlleleSizeAllPopulationsPairs
std::string REstimatingSpatialStructureAlleleSizeAllPopulationsPairs(std::string inputFile, std::string outputFile, std::string dataType);
RcppExport SEXP genepop_REstimatingSpatialStructureAlleleSizeAllPopulationsPairs(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP dataTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataType(dataTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(REstimatingSpatialStructureAlleleSizeAllPopulationsPairs(inputFile, outputFile, dataType));
    return rcpp_result_gen;
END_RCPP
}
// RIsolationByDistanceBetweenIndividuals
std::string RIsolationByDistanceBetweenIndividuals(std::string inputFile, std::string outputFile, std::string dataType, std::string statistic, std::string geographicScale, double CIcoverage, double testPoint, double minimalDistance, double maximalDistance, int mantelPermutations, bool mantelRankTest);
RcppExport SEXP genepop_RIsolationByDistanceBetweenIndividuals(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP dataTypeSEXP, SEXP statisticSEXP, SEXP geographicScaleSEXP, SEXP CIcoverageSEXP, SEXP testPointSEXP, SEXP minimalDistanceSEXP, SEXP maximalDistanceSEXP, SEXP mantelPermutationsSEXP, SEXP mantelRankTestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataType(dataTypeSEXP);
    Rcpp::traits::input_parameter< std::string >::type statistic(statisticSEXP);
    Rcpp::traits::input_parameter< std::string >::type geographicScale(geographicScaleSEXP);
    Rcpp::traits::input_parameter< double >::type CIcoverage(CIcoverageSEXP);
    Rcpp::traits::input_parameter< double >::type testPoint(testPointSEXP);
    Rcpp::traits::input_parameter< double >::type minimalDistance(minimalDistanceSEXP);
    Rcpp::traits::input_parameter< double >::type maximalDistance(maximalDistanceSEXP);
    Rcpp::traits::input_parameter< int >::type mantelPermutations(mantelPermutationsSEXP);
    Rcpp::traits::input_parameter< bool >::type mantelRankTest(mantelRankTestSEXP);
    rcpp_result_gen = Rcpp::wrap(RIsolationByDistanceBetweenIndividuals(inputFile, outputFile, dataType, statistic, geographicScale, CIcoverage, testPoint, minimalDistance, maximalDistance, mantelPermutations, mantelRankTest));
    return rcpp_result_gen;
END_RCPP
}
// RIsolationByDistanceBetweenGroups
std::string RIsolationByDistanceBetweenGroups(std::string inputFile, std::string outputFile, std::string dataType, std::string statistic, std::string geographicScale, double CIcoverage, double testPoint, double minimalDistance, double maximalDistance, int mantelPermutations, bool mantelRankTest);
RcppExport SEXP genepop_RIsolationByDistanceBetweenGroups(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP dataTypeSEXP, SEXP statisticSEXP, SEXP geographicScaleSEXP, SEXP CIcoverageSEXP, SEXP testPointSEXP, SEXP minimalDistanceSEXP, SEXP maximalDistanceSEXP, SEXP mantelPermutationsSEXP, SEXP mantelRankTestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataType(dataTypeSEXP);
    Rcpp::traits::input_parameter< std::string >::type statistic(statisticSEXP);
    Rcpp::traits::input_parameter< std::string >::type geographicScale(geographicScaleSEXP);
    Rcpp::traits::input_parameter< double >::type CIcoverage(CIcoverageSEXP);
    Rcpp::traits::input_parameter< double >::type testPoint(testPointSEXP);
    Rcpp::traits::input_parameter< double >::type minimalDistance(minimalDistanceSEXP);
    Rcpp::traits::input_parameter< double >::type maximalDistance(maximalDistanceSEXP);
    Rcpp::traits::input_parameter< int >::type mantelPermutations(mantelPermutationsSEXP);
    Rcpp::traits::input_parameter< bool >::type mantelRankTest(mantelRankTestSEXP);
    rcpp_result_gen = Rcpp::wrap(RIsolationByDistanceBetweenGroups(inputFile, outputFile, dataType, statistic, geographicScale, CIcoverage, testPoint, minimalDistance, maximalDistance, mantelPermutations, mantelRankTest));
    return rcpp_result_gen;
END_RCPP
}
// RIsolationByDistanceBetweenIndividualsWithSettingsFile
std::string RIsolationByDistanceBetweenIndividualsWithSettingsFile(std::string inputFile, std::string outputFile, std::string settingsFile);
RcppExport SEXP genepop_RIsolationByDistanceBetweenIndividualsWithSettingsFile(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RIsolationByDistanceBetweenIndividualsWithSettingsFile(inputFile, outputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// RIsolationByDistanceBetweenGroupsWithSettingsFile
std::string RIsolationByDistanceBetweenGroupsWithSettingsFile(std::string inputFile, std::string outputFile, std::string settingsFile);
RcppExport SEXP genepop_RIsolationByDistanceBetweenGroupsWithSettingsFile(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RIsolationByDistanceBetweenGroupsWithSettingsFile(inputFile, outputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// REcumenicismFstat
std::string REcumenicismFstat(std::string inputFile, std::string outputFile);
RcppExport SEXP genepop_REcumenicismFstat(SEXP inputFileSEXP, SEXP outputFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    rcpp_result_gen = Rcpp::wrap(REcumenicismFstat(inputFile, outputFile));
    return rcpp_result_gen;
END_RCPP
}
// REcumenicismBiosysLetter
std::string REcumenicismBiosysLetter(std::string inputFile, std::string outputFile);
RcppExport SEXP genepop_REcumenicismBiosysLetter(SEXP inputFileSEXP, SEXP outputFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    rcpp_result_gen = Rcpp::wrap(REcumenicismBiosysLetter(inputFile, outputFile));
    return rcpp_result_gen;
END_RCPP
}
// REcumenicismBiosysNumber
std::string REcumenicismBiosysNumber(std::string inputFile, std::string outputFile);
RcppExport SEXP genepop_REcumenicismBiosysNumber(SEXP inputFileSEXP, SEXP outputFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    rcpp_result_gen = Rcpp::wrap(REcumenicismBiosysNumber(inputFile, outputFile));
    return rcpp_result_gen;
END_RCPP
}
// REcumenicismLinkdos
std::string REcumenicismLinkdos(std::string inputFile, std::string outputFile);
RcppExport SEXP genepop_REcumenicismLinkdos(SEXP inputFileSEXP, SEXP outputFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    rcpp_result_gen = Rcpp::wrap(REcumenicismLinkdos(inputFile, outputFile));
    return rcpp_result_gen;
END_RCPP
}
// RNullAlleleEstimateAlleleFrequencies
std::string RNullAlleleEstimateAlleleFrequencies(std::string inputFile, std::string outputFile, std::string nullAlleleMethod, double CIcoverage);
RcppExport SEXP genepop_RNullAlleleEstimateAlleleFrequencies(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP nullAlleleMethodSEXP, SEXP CIcoverageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type nullAlleleMethod(nullAlleleMethodSEXP);
    Rcpp::traits::input_parameter< double >::type CIcoverage(CIcoverageSEXP);
    rcpp_result_gen = Rcpp::wrap(RNullAlleleEstimateAlleleFrequencies(inputFile, outputFile, nullAlleleMethod, CIcoverage));
    return rcpp_result_gen;
END_RCPP
}
// RDiploidisationHaploidData
std::string RDiploidisationHaploidData(std::string inputFile, std::string outputFile);
RcppExport SEXP genepop_RDiploidisationHaploidData(SEXP inputFileSEXP, SEXP outputFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RDiploidisationHaploidData(inputFile, outputFile));
    return rcpp_result_gen;
END_RCPP
}
// RRelabelingAlleles
std::string RRelabelingAlleles(std::string inputFile, std::string outputFile);
RcppExport SEXP genepop_RRelabelingAlleles(SEXP inputFileSEXP, SEXP outputFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RRelabelingAlleles(inputFile, outputFile));
    return rcpp_result_gen;
END_RCPP
}
// RConversionToIndividualDataWithPopulationNames
std::string RConversionToIndividualDataWithPopulationNames(std::string inputFile, std::string outputFile);
RcppExport SEXP genepop_RConversionToIndividualDataWithPopulationNames(SEXP inputFileSEXP, SEXP outputFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RConversionToIndividualDataWithPopulationNames(inputFile, outputFile));
    return rcpp_result_gen;
END_RCPP
}
// RConversionToIndividualDataWithIndividualNames
std::string RConversionToIndividualDataWithIndividualNames(std::string inputFile, std::string outputFile);
RcppExport SEXP genepop_RConversionToIndividualDataWithIndividualNames(SEXP inputFileSEXP, SEXP outputFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RConversionToIndividualDataWithIndividualNames(inputFile, outputFile));
    return rcpp_result_gen;
END_RCPP
}
// RRandomSamplingOfHaploidGenotypesFromDiploidOnes
std::string RRandomSamplingOfHaploidGenotypesFromDiploidOnes(std::string inputFile, std::string outputFile);
RcppExport SEXP genepop_RRandomSamplingOfHaploidGenotypesFromDiploidOnes(SEXP inputFileSEXP, SEXP outputFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RRandomSamplingOfHaploidGenotypesFromDiploidOnes(inputFile, outputFile));
    return rcpp_result_gen;
END_RCPP
}
// RNullAlleleEstimateAlleleFrequenciesWithSettingsFile
std::string RNullAlleleEstimateAlleleFrequenciesWithSettingsFile(std::string inputFile, std::string outputFile, std::string settingsFile);
RcppExport SEXP genepop_RNullAlleleEstimateAlleleFrequenciesWithSettingsFile(SEXP inputFileSEXP, SEXP outputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RNullAlleleEstimateAlleleFrequenciesWithSettingsFile(inputFile, outputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// RHWtableHD
std::string RHWtableHD(std::string inputFile, bool enumeration, int dememorization, int batches, int iterations);
RcppExport SEXP genepop_RHWtableHD(SEXP inputFileSEXP, SEXP enumerationSEXP, SEXP dememorizationSEXP, SEXP batchesSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< bool >::type enumeration(enumerationSEXP);
    Rcpp::traits::input_parameter< int >::type dememorization(dememorizationSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWtableHD(inputFile, enumeration, dememorization, batches, iterations));
    return rcpp_result_gen;
END_RCPP
}
// RHWtableHE
std::string RHWtableHE(std::string inputFile, bool enumeration, int dememorization, int batches, int iterations);
RcppExport SEXP genepop_RHWtableHE(SEXP inputFileSEXP, SEXP enumerationSEXP, SEXP dememorizationSEXP, SEXP batchesSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< bool >::type enumeration(enumerationSEXP);
    Rcpp::traits::input_parameter< int >::type dememorization(dememorizationSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWtableHE(inputFile, enumeration, dememorization, batches, iterations));
    return rcpp_result_gen;
END_RCPP
}
// RHWtableProbability
std::string RHWtableProbability(std::string inputFile, bool enumeration, int dememorization, int batches, int iterations);
RcppExport SEXP genepop_RHWtableProbability(SEXP inputFileSEXP, SEXP enumerationSEXP, SEXP dememorizationSEXP, SEXP batchesSEXP, SEXP iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< bool >::type enumeration(enumerationSEXP);
    Rcpp::traits::input_parameter< int >::type dememorization(dememorizationSEXP);
    Rcpp::traits::input_parameter< int >::type batches(batchesSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWtableProbability(inputFile, enumeration, dememorization, batches, iterations));
    return rcpp_result_gen;
END_RCPP
}
// RHWtableAlleleFrequenciesExpectedGenotypesFis
std::string RHWtableAlleleFrequenciesExpectedGenotypesFis(std::string inputFile);
RcppExport SEXP genepop_RHWtableAlleleFrequenciesExpectedGenotypesFis(SEXP inputFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWtableAlleleFrequenciesExpectedGenotypesFis(inputFile));
    return rcpp_result_gen;
END_RCPP
}
// RHWtableHDWithSettingsFile
std::string RHWtableHDWithSettingsFile(std::string inputFile, std::string settingsFile);
RcppExport SEXP genepop_RHWtableHDWithSettingsFile(SEXP inputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWtableHDWithSettingsFile(inputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// RHWtableHEWithSettingsFile
std::string RHWtableHEWithSettingsFile(std::string inputFile, std::string settingsFile);
RcppExport SEXP genepop_RHWtableHEWithSettingsFile(SEXP inputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWtableHEWithSettingsFile(inputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// RHWtableProbabilityWithSettingsFile
std::string RHWtableProbabilityWithSettingsFile(std::string inputFile, std::string settingsFile);
RcppExport SEXP genepop_RHWtableProbabilityWithSettingsFile(SEXP inputFileSEXP, SEXP settingsFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputFile(inputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type settingsFile(settingsFileSEXP);
    rcpp_result_gen = Rcpp::wrap(RHWtableProbabilityWithSettingsFile(inputFile, settingsFile));
    return rcpp_result_gen;
END_RCPP
}
// Rinterrupt_genepop
void Rinterrupt_genepop();
RcppExport SEXP genepop_Rinterrupt_genepop() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rinterrupt_genepop();
    return R_NilValue;
END_RCPP
}
// Rset_restriction
void Rset_restriction(bool set);
RcppExport SEXP genepop_Rset_restriction(SEXP setSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type set(setSEXP);
    Rset_restriction(set);
    return R_NilValue;
END_RCPP
}
